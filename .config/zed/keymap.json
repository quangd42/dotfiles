[
  {
    // VimControl: Indicates that vim keybindings should work.
    // Currently an alias for vim_mode == normal || vim_mode == visual || vim_mode == operator,
    // but the definition may change over time
    "context": "VimControl && !menu",
    "bindings": {
      "ctrl-h": "workspace::ActivatePaneLeft",
      "ctrl-l": "workspace::ActivatePaneRight",
      "ctrl-k": "workspace::ActivatePaneUp",
      "ctrl-j": "workspace::ActivatePaneDown"
    }
  },
  // Normal & Visual
  {
    "context": "vim_mode == normal || vim_mode == visual && !menu",
    "bindings": {
      // Editing
      "alt-down": "editor::MoveLineDown",
      "alt-up": "editor::MoveLineUp",
      ">": "editor::Indent",
      "<": "editor::Outdent",
      "g h": "vim::FirstNonWhitespace",
      "g l": "vim::EndOfLine",

      // LSP Actions
      "space c a": "editor::ToggleCodeActions",
      "g .": null,
      "space c r": "editor::Rename",
      "g r": "editor::FindAllReferences",

      // Subword
      "w": "vim::NextSubwordStart",
      "b": "vim::PreviousSubwordStart",
      "e": "vim::NextSubwordEnd",
      "g e": "vim::PreviousSubwordEnd",

      // Vimsneak
      "backspace": "vim::PushSneak",
      "shift-backspace": "vim::PushSneakBackward"
    }
  },
  // Normal
  {
    "context": "vim_mode == normal && !menu",
    "bindings": {
      // Editing
      "shift-y": ["workspace::SendKeystrokes", "y $"],
      "U": "editor::Redo",
      "space c f": "editor::Format",

      // Navigation
      "space a": "assistant::ToggleFocus",
      "space b": "tab_switcher::Toggle",
      "space e": "pane::RevealInProjectPanel",
      "space f": "file_finder::Toggle",
      "space s s": "project_symbols::Toggle",
      "H": "pane::ActivatePreviousItem",
      "L": "pane::ActivateNextItem",
      "space \\": "pane::SplitRight",
      "space -": "pane::SplitDown",

      // Git operations
      "space g D": "git::Diff",
      "space g R": "git::RestoreFile",
      "space g S": "git::StageFile",
      "space g U": "git::UnstageFile",
      "space g a": "git::Add",
      "space g d": "editor::ToggleSelectedDiffHunks",
      "space g g": "git_panel::ToggleFocus",
      "space g r": "git::Restore",
      "space g s": "git::StageAndNext",
      "space g t": "git::ToggleStaged",
      "space g u": "git::UnstageAndNext"
    }
  },
  // Visual
  {
    "context": "vim_mode == visual",
    "bindings": {
      "shift-s": ["vim::PushAddSurrounds", {}],
      "space c f": "editor::FormatSelections"
    }
  },
  // Insert
  {
    "context": "vim_mode == insert",
    "bindings": {
      "alt-down": "editor::MoveLineDown",
      "alt-up": "editor::MoveLineUp"
    }
  },
  // Operator
  {
    "context": "vim_mode == operator",
    "bindings": {
      "v": "vim::Subword"
    }
  },
  // Project Panel
  {
    "context": "ProjectPanel && not_editing",
    "bindings": {
      "a": "project_panel::NewFile",
      "d": "project_panel::Delete",
      "enter": ["workspace::SendKeystrokes", "o space e"],
      "g Y": "workspace::CopyRelativePath",
      "g y": "workspace::CopyPath",
      "p": "project_panel::Paste",
      "q": "workspace::ToggleLeftDock",
      "r": "project_panel::Rename",
      "shift-a": "project_panel::NewDirectory",
      "space e": "workspace::ToggleLeftDock",
      "x": "project_panel::Cut",
      "y": "project_panel::Copy"
    }
  },
  // Git Panel
  {
    "context": "GitPanel && ChangesList",
    "bindings": {
      "a": "git::StageAll",
      "b": "git::Branch",
      "c": "git::Commit",
      "d": "git::RestoreFile",
      "f": "git::Fetch",
      "p": "git::Pull",
      "P": "git::Push",
      "q": "workspace::ToggleLeftDock",
      "backspace": null,
      "escape": "workspace::ToggleLeftDock"
    }
  },
  {
    "context": "GitPanel > Editor",
    "bindings": {
      "alt-y": "git::GenerateCommitMessage",
      "escape": "git_panel::FocusChanges"
    }
  },
  {
    "context": "GitCommit > Editor",
    "bindings": {
      "alt-y": "git::GenerateCommitMessage"
    }
  },
  // Terminal
  {
    "context": "Terminal",
    "bindings": {
      "cmd-enter": "workspace::NewTerminal",
      "ctrl-m": "workspace::ToggleZoom",
      "ctrl-h": "pane::ActivatePreviousItem",
      "ctrl-l": "pane::ActivateNextItem",
      "cmd-x": "terminal::ToggleViMode"
    }
  },
  // Editor wide
  {
    // NOTE: This is truly global, no context!
    "bindings": {
      "cmd-o": "projects::OpenRecent",
      "alt-cmd-o": "workspace::Open"
    }
  },
  {
    "context": "EmptyPane || SharedScreen",
    "bindings": {
      // Put key bindings here (in addition to the context above) if you want them to
      // work when no editor exists.
      "space a": "assistant::ToggleFocus",
      "space b": "tab_switcher::Toggle",
      "space e": "pane::RevealInProjectPanel",
      "space f": "file_finder::Toggle"
    }
  },

  // Pane navigation
  {
    "context": "Dock",
    "bindings": {
      "ctrl-h": "workspace::ActivatePaneLeft",
      "ctrl-l": "workspace::ActivatePaneRight",
      "ctrl-k": "workspace::ActivatePaneUp",
      "ctrl-j": "workspace::ActivatePaneDown"
      // ... or other keybindings
    }
  },

  // Code Completion (Language Server)
  {
    "context": "Editor && showing_completions",
    "bindings": {
      "ctrl-m": "editor::ConfirmCompletion",
      "ctrl-y": "editor::ConfirmCompletion",
      "enter": "editor::NewlineBelow"
    }
  },
  // Edit Prediction (Zed Completion)
  {
    "context": "Editor && mode == full && edit_prediction",
    "use_key_equivalents": true,
    "bindings": {
      "alt-y": "editor::NextEditPrediction",
      "alt-shift-y": "editor::PreviousEditPrediction",
      "alt-p": "editor::AcceptPartialEditPrediction"
    }
  },
  {
    "context": "Editor && !edit_prediction",
    "use_key_equivalents": true,
    "bindings": {
      "alt-y": "editor::ShowEditPrediction",
      "tab": "editor::Tab"
    }
  },
  {
    "context": "Editor && edit_prediction",
    "bindings": {
      "alt-y": "editor::AcceptEditPrediction",
      "tab": null
    }
  },
  {
    "context": "Editor && edit_prediction_conflict",
    "use_key_equivalents": true,
    "bindings": {
      "alt-y": "editor::AcceptEditPrediction",
      "tab": null
    }
  },
  // Bind `tab` back to its original behavior.
  {
    "context": "Editor",
    "bindings": {
      "tab": "editor::Tab"
    }
  },
  {
    "context": "Editor && showing_completions",
    "bindings": {
      "tab": "editor::ComposeCompletion"
    }
  },
  {
    "context": "(VimControl && !menu) || vim_mode == replace || vim_mode == waiting",
    "bindings": {
      "tab": "vim::Tab"
    }
  },
  {
    "context": "vim_mode == literal",
    "bindings": {
      "tab": ["vim::Literal", ["tab", "\u0009"]]
    }
  }
  // END bind `tab` back
]
